import { Telegraf, Markup } from "telegraf";
import axios from "axios";
import { XMLParser } from "fast-xml-parser";

const BOT_TOKEN = "8160146527:AAHfmAJ_iQFNfCrhIf6KZsqefGxCGT_ymeo";
const bot = new Telegraf(BOT_TOKEN);

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ===
async function getRate(code = "USD") {
  try {
    const url = "https://nationalbank.kz/rss/rates_all.xml";
    const response = await axios.get(url);
    const parser = new XMLParser();
    const data = parser.parse(response.data);
    const items = data.rss.channel.item;

    const currency = items.find((item) => item.title === code);
    if (currency) {
      return parseFloat(currency.description).toFixed(2);
    } else {
      return null;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API –ù–ë–†–ö:", error.message);
    return null;
  }
}

// === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
const userState = {}; // { userId: { mode: "USD", rate: 470 } }

// === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
function mainMenu(ctx) {
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
    Markup.keyboard([["USD ‚Üí KZT"], ["EUR ‚Üí KZT"], ["RUB ‚Üí KZT"]])
      .resize()
  );
}

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.start((ctx) => {
  mainMenu(ctx);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç ===
bot.hears("USD ‚Üí KZT", async (ctx) => {
  const rate = await getRate("USD");
  if (rate) {
    userState[ctx.from.id] = { mode: "USD", rate: parseFloat(rate) };
    ctx.reply(
      `üíµ 1 USD = ${rate} ‚Ç∏\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"`,
      Markup.keyboard([["üîô –ù–∞–∑–∞–¥"]]).resize()
    );
  }
});

bot.hears("EUR ‚Üí KZT", async (ctx) => {
  const rate = await getRate("EUR");
  if (rate) {
    userState[ctx.from.id] = { mode: "EUR", rate: parseFloat(rate) };
    ctx.reply(
      `üí∂ 1 EUR = ${rate} ‚Ç∏\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ EUR –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"`,
      Markup.keyboard([["üîô –ù–∞–∑–∞–¥"]]).resize()
    );
  }
});

bot.hears("RUB ‚Üí KZT", async (ctx) => {
  const rate = await getRate("RUB");
  if (rate) {
    userState[ctx.from.id] = { mode: "RUB", rate: parseFloat(rate) };
    ctx.reply(
      `üá∑üá∫ 1 RUB = ${rate} ‚Ç∏\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"`,
      Markup.keyboard([["üîô –ù–∞–∑–∞–¥"]]).resize()
    );
  }
});

// === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
bot.hears("üîô –ù–∞–∑–∞–¥", (ctx) => {
  delete userState[ctx.from.id];
  mainMenu(ctx);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ ===
bot.on("text", (ctx) => {
  const userId = ctx.from.id;
  if (userState[userId]) {
    const input = ctx.message.text.replace(",", "."); // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π
    const amount = parseFloat(input);

    if (!isNaN(amount)) {
      const { mode, rate } = userState[userId];
      const result = (amount * rate).toFixed(2);
      ctx.reply(
        `${amount} ${mode} = ${result} ‚Ç∏`,
        Markup.keyboard([["üîô –ù–∞–∑–∞–¥"]]).resize()
      );
    } else {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100");
    }
  }
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
